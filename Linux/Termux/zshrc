# < zsh and oh-my-zsh. 安装zsh、oh-my-zsh > ----------------------{
# Path to your oh-my-zsh installation
export ZSH=$HOME/.oh-my-zsh

if [[ ! -d ~/.oh-my-zsh ]]; then
  if ! [[ -x "$(command -v curl)" ]];then
    apt install curl -y
  fi
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

source $ZSH/oh-my-zsh.sh

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
# -------}

# < zplug > ----------------------}
# install zplug, plugin manager for zsh, https://github.com/zplug/zplug
# zplug configruation
if [[ ! -d "${ZPLUG_HOME}" ]]; then
  if [[ ! -d ~/.zplug ]]; then
    git clone https://github.com/zplug/zplug ~/.zplug
    # curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
    # If we can't get zplug, it'll be a very sobering shell experience. To at
    # least complete the sourcing of this file, we'll define an always-false
    # returning zplug function.
    if [[ $? != 0 ]]; then
      function zplug() {
        return 1
      }
    fi
  fi
  export ZPLUG_HOME=~/.zplug
fi
if [[ -d "${ZPLUG_HOME}" ]]; then
  source "${ZPLUG_HOME}/init.zsh"
fi
# zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme
zplug 'romkatv/powerlevel10k', use:powerlevel10k.zsh-theme
zplug 'plugins/git', from:oh-my-zsh, if:'which git'
zplug "plugins/vi-mode", from:oh-my-zsh
zplug 'zsh-users/zsh-autosuggestions'
zplug 'zsh-users/zsh-completions', defer:2
zplug 'zsh-users/zsh-history-substring-search'
zplug 'zsh-users/zsh-syntax-highlighting', defer:2

if ! zplug check; then
  zplug install
fi

zplug load

# Spaceship-prompt vi-mode. 取消 spaceship vi-mode
SPACESHIP_VI_MODE_SHOW=false
# -------}

# < oh-my-zsh theme powerlevel10k > ----------------------{
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon root_indicator dir vcs)
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs pyenv)
POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=''
POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR=''
POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR=''
POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR=''
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="%F{blue}\u256D\u2500%F{white}"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="%F{blue}\u2570\uf460%F{white} "
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator dir dir_writable_joined)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time
                                    vcs background_jobs_joined time_joined)
POWERLEVEL9K_VCS_MODIFIED_BACKGROUND="clear"
POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND="clear"
POWERLEVEL9K_VCS_MODIFIED_FOREGROUND="yellow"
POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND="yellow"
POWERLEVEL9K_DIR_HOME_BACKGROUND="clear"
POWERLEVEL9K_DIR_HOME_FOREGROUND="blue"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND="clear"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND="blue"
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND="clear"
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="red"
POWERLEVEL9K_DIR_DEFAULT_BACKGROUND="clear"
POWERLEVEL9K_DIR_DEFAULT_FOREGROUND="white"
POWERLEVEL9K_ROOT_INDICATOR_BACKGROUND="red"
POWERLEVEL9K_ROOT_INDICATOR_FOREGROUND="white"
POWERLEVEL9K_STATUS_OK_BACKGROUND="clear"
POWERLEVEL9K_STATUS_OK_FOREGROUND="green"
POWERLEVEL9K_STATUS_ERROR_BACKGROUND="clear"
POWERLEVEL9K_STATUS_ERROR_FOREGROUND="red"
POWERLEVEL9K_TIME_BACKGROUND="clear"
POWERLEVEL9K_TIME_FOREGROUND="cyan"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='clear'
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='magenta'
POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND='clear'
POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND='green'
ZSH_THEME="powerlevel10k/powerlevel10k"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
# -------}

# < alias. 别名 > ----------------------{
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Bypass firewall in network-poverty areas (Mainland CN)
# Do change the proxy ports according to your own configurations
alias fuckgfw="export http_proxy=socks5://127.0.0.1:1080 https_proxy=socks5://127.0.0.1:1080 && echo '- You are out! -'"
alias unfuckgfw="unset http_proxy https_proxy && echo '- Welcome inside. -'"

# Jump straight to my Code folder and say something cute via cowsay
# Do change $PATH_TO_YOUR_CODE according to your own configurations
# Refer to README for installations of cowsay and fortune
# To install Perl
if ! [ -x "$(command -v fortune)" ];then
  apt install fortune -y
fi
if ! [ -x "$(command -v cowsay)" ];then
  apt install cowsay -y
fi
alias gocode="cd $HOME/$PATH_TO_YOUR_CODE && fortune | cowsay"
alias gowork="cd $HOME/WorkSpace && fortune | cowsay"

# Terminal Color tese
alias colortest="curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ | bash"

# Check my ip
alias myips="curl cip.cc"

# Check current ip (When running `fuckgfw` you want to know whether you are out or not.)
alias myip="curl -L tool.lu/ip"

# Login to mySQL server
alias loginmysql="mysql -u root -p"

# Open file
alias open="xdg-open"
alias vs="code ."

alias clipboard="xclip -selection clipboard"
alias br="xrandr --output eDP1 --brightness"
alias vitan="hexo clean && hexo g && hexo s"
alias tnew='tmux new -s'

alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias ls='ls -F --color=auto'
alias ll='ls -al'
alias grep='grep --color=auto'
alias la='ls -a'

# Package manager
alias update='apt update && apt upgrade'

alias pin='yes|udo pacman -S'
alias pun='sudo pacman -R'

# Update all packages via pacman (Arch Linux/Manjaro)
alias puu="sudo pacman -Syu"

# Update all packages via Homebrew (If you use a Mac)
alias buu="brew update && brew upgrade"

# Update all packages via apt (Ubuntu/Debian)
alias auu="sudo apt update && sudo apt upgrade -y"

# SSH to remote server
# Change $PATH_TO_KEY and $SERVER_IP according to your configurations
# For example: alias sshaws="ssh -i ~/.ssh/rsa_id ubuntu@x.x.x.x"
alias sshsvr="ssh -i $PATH_TO_KEY $SERVER_IP"

# History record top10. 历史命令 top10
alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
# -------}

# < cd and other > ----------------------{
# Allowing the use of annotations in the interaction mode.允许在交互模式中使用注释  Example:例如：
# cmd #这是注释
setopt INTERACTIVE_COMMENTS

# Enable automatic CD, enter directory name and enter back into directory.启用自动 cd，输入目录名回车进入目录
setopt AUTO_CD

# Extended Path.扩展路径
# /v/c/p/p => /var/cache/pacman/pkg
setopt complete_in_word

# forbidden core dumps. 禁用 core dumps
limit coredumpsize 0

# The following characters are considered part of the word.以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
# -------}

# < Auto-completion function.自动补全功能 > ----------------------{
setopt AUTO_LIST
setopt AUTO_MENU
# When this option is turned on, the menu item will be checked directly when it is filled.开启此选项，补全时会直接选中菜单项
#setopt MENU_COMPLETE

autoload -U compinit
compinit

# auto-completion cache.自动补全缓存
# zstyle ':completion::complete:*' use-cache on
# zstyle ':completion::complete:*' cache-path .zcache
# zstyle ':completion:*:cd:*' ignore-parents parent pwd

# Auto-completion option.自动补全选项
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'

zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

# path completion.路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

# Color complement menus.彩色补全菜单
eval $(dircolors -b)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

# Case correction.修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# mistale correction.错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# kill complement. kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

# Complement type prompt group. 补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ complementary sequence. cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'

# 空行(光标在行首)补全 "cd " 
user-complete(){
case $BUFFER in
"" )                       # 空行填入 "cd ",Fill in the blank lines with "CD "
BUFFER="cd "
zle end-of-line
zle expand-or-complete
;;
"cd --" )                  # "cd --" 替换为 "cd +","CD --" replaced with "CD +"
BUFFER="cd +"
zle end-of-line
zle expand-or-complete
;;
"cd +-" )                  # "cd +-" 替换为 "cd -","CD +-" is replaced with "CD -"
BUFFER="cd -"
zle end-of-line
zle expand-or-complete
;;
* )
zle expand-or-complete
;;
esac
}
zle -N user-complete
bindkey "\t" user-complete
# -------}

# < Line edit highlighting mode。行编辑高亮模式  > ----------------------{
# Ctrl+@ ， Set the marker with the region. 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
special:bold      # special character.特殊字符
isearch:underline)# Keywords used in the search.搜索时使用的关键字
# -------}

# < Insert sudo before the command.在命令前插入 sudo   > ----------------------{
# Define functions.定义功能
sudo-command-line() {
[[ -z $BUFFER ]] && zle up-history
[[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
zle end-of-line                 #光标移动到行末,The cursor moves to the end of the line.
}
zle -N sudo-command-line
#定义快捷键为 Define a shortcut key as： [Esc] [Esc]
bindkey "\e\e" sudo-command-line
 
# [Esc][h] man 当前命令时，显示简短说明.[Esc][h] man A short description of the current command is displayed
alias run-help >&/dev/null && unalias run-help
autoload run-help
# -------}

# < User configuration and vim. > ----------------------{
# User configuration
# export PATH=$HOME/bin:/usr/local/bin:$PATH
# export MANPATH="/usr/local/man:$MANPATH"
# export PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin"
# export PATH=$PREFIX/local/bin:$PREFIX/bin:$PREFIX/bin/applets:$PATH

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# for python
export PYTHONIOENCODING=UTF-8
# py.test color output
export PYTEST_ADDOPTS="--color=yes"    

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# fzf config, must sudo pacman install fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Compilation flags
# export ARCHFLAGS="-arch x86_64"
# -------}

# < History record. 历史记录 > ----------------------{
# Number of historical records. 历史记录条目
export HISTSIZE=10000
# Number of historical records after logout. 注销时保持的历史记录条数
export SAVEHIST=10000

# Historical records file. 历史记录文件
export HISTFILE=~/.zhistory
# Writing in the historical record in an additional way. 以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
# If the same commands are entered consecutively, only one of them remains in the history record.如果连续输入的命令相同，历史纪录中只保留一个
setopt HIST_IGNORE_DUPS
# Adding a time stamp to an order in the historical record.
setopt EXTENDED_HISTORY

# Enable the history of the cd command, cd -[TAB] into the history path.启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
# Only one of the same historical paths remains.相同的历史路径只保留一个
setopt PUSHD_IGNORE_DUPS

# Add a space before the command and do not add this command to the record file.在命令前添加空格，不将此命令添加到纪录文件中
setopt HIST_IGNORE_SPACE

# Each directory uses a separate historical record.每个目录使用独立的历史纪录
cd() {
builtin cd "$@"                             # do actual cd
fc -W                                       # write current history  file
local HISTDIR="$HOME/.zsh_history$PWD"      # use nested folders for history
if  [ ! -d "$HISTDIR" ] ; then          # create folder if needed
mkdir -p "$HISTDIR"
fi
export HISTFILE="$HISTDIR/zhistory"     # set new history file
touch $HISTFILE
local ohistsize=$HISTSIZE
HISTSIZE=0                              # Discard previous dir's history
HISTSIZE=$ohistsize                     # Prepare for new dir's history
fc -R                                       #read from current histfile
}
mkdir -p $HOME/.zsh_history$PWD
export HISTFILE="$HOME/.zsh_history$PWD/zhistory"

function allhistory { cat $(find $HOME/.zsh_history -name zhistory) }
function convhistory {
sort $1 | uniq |
sed 's/^:\([ 0-9]*\):[0-9]*;\(.*\)/\1::::::\2/' |
awk -F"::::::" '{ $1=strftime("%Y-%m-%d %T",$1) "|"; print }'
}

# Use the histall command to view the full history.使用 histall 命令查看全部历史纪录
function histall { convhistory =(allhistory) |
sed '/^.\{20\} *cd/i\\' }
# View current directory history with hist.使用 hist 查看当前目录历史纪录
function hist { convhistory $HISTFILE }

# Historical record top50.全部历史纪录 top50
function top50 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1="" ; print }' | sed 's/ /\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 50 }
# -------}

# < Colorful Man Page > ----------------------{
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
# -------}

# < Default editor. 默认编辑器 > ----------------------{
export EDITOR=vim
# -------}

# < Input method. 输入法 > ----------------------{
export XMODIFIERS="@im=ibus"
export QT_MODULE=ibus
export GTK_MODULE=ibus
# -------}

# < Better Git Logs. > ----------------------{
# Using EMOJI-LOG (https://github.com/ahmadawais/Emoji-Log).
# Git Commit, Add all and Push — in one step.
function gcap() {
  git add . && git commit -m "$*" && git push
}
# NEW.
function gnew() {
  gcap "📦 NEW: $@"
}
# IMPROVE.
function gimp() {
  gcap "👌 IMPROVE: $@"
}
# FIX.
function gfix() {
  gcap "🐛 FIX: $@"
}
# RELEASE.
function grlz() {
  gcap "🚀 RELEASE: $@"
}
# DOC.
function gdoc() {
  gcap "📖 DOC: $@"
}
# TEST.
function gtst() {
  gcap "✅ TEST: $@"
}
# -------}

# To install Perl
if ! [ -x "$(command -v perl)" ];then
  apt install perl -y
fi