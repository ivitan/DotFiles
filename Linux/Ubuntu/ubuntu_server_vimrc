"http://stackoverflow.com/questions/30444890/vim-use-python3-interpreter-in-python-mode
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

" https://superuser.com/questions/302186/vim-scrolls-very-slowly-when-a-line-is-too-long
" Syntax coloring lines that are too long just slows down the world
set synmaxcol=270
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

" 先创建 .tmp 文件夹，处理一些权限导致的无法在 /tmp 创建文件的问题，有些 vim 插件需要创建临时文件，直接在 /tmp 里创建可能会失败
let $TMPDIR = $HOME."/.tmp"
set bg=dark
set backspace=indent,eol,start
set scrolloff=3
set cursorline
autocmd Filetype gitcommit setlocal spell textwidth=72
set pastetoggle=<F2>
map <F4> :%retab! <CR> :w <CR>
set nu
set ts=4
set sw=4
set expandtab
syntax on
set hls
set incsearch
set cindent
set autoindent
set term=xterm-256color
set guifont=Monaco\ 12
set guifont=Monaco\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 12
set laststatus=2
set encoding=utf-8
set termencoding=utf-8
set formatoptions+=mM
set fencs=utf-8,gbk

" NOTE: you must create ~/.vim/undo first
set undofile
set undodir=~/.vim/undo
set undolevels=1000
set backupdir=~/.vim/backup

function HeaderPython()
    call setline(1, "#!/usr/bin/env python")
    call append(1, "# -*- coding: utf-8 -*-")
    normal G
    normal o
    normal o
    call setline(5, "if __name__ == '__main__':")
    call setline(6, "    pass")
endf
autocmd bufnewfile *.py call HeaderPython()

function HeaderSh()
    call setline(1, "#!/usr/bin/env bash")
    normal G
    normal o
    normal o
endf
autocmd bufnewfile *.sh call HeaderSh()

" shortcuts to vimdiff, http://stackoverflow.com/questions/7309707/why-does-git-mergetool-opens-4-windows-in-vimdiff-id-expect-3
let mapleader=','
let g:mapleader=','

if &diff
    map <leader>1 :diffget LOCAL<CR>
    map <leader>2 :diffget BASE<CR>
    map <leader>3 :diffget REMOTE<CR>
endif

set nocompatible              " be iMproved, required

" https://github.com/junegunn/vim-plug
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'gregsexton/MatchTag'
Plug 'tpope/tpope-vim-abolish'  "https://github.com/tpope/tpope-vim-abolish 转换骆驼命名法
Plug 'Chiel92/vim-autoformat' " https://github.com/Chiel92/vim-autoformat for code formatter
Plug 'terryma/vim-expand-region'
Plug 'stephpy/vim-yaml'
Plug 'chase/vim-ansible-yaml'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Plug 'ryanss/vim-hackernews'
" Plug 'ianva/vim-youdao-translater'  " https://github.com/ianva/vim-youdao-translater
Plug 'ntpeters/vim-better-whitespace'
Plug 'fullybaked/toggle-numbers.vim'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized.git'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'lfv89/vim-interestingwords'    " https://github.com/lfv89/vim-interestingwords
Plug 'tpope/vim-sensible'
Plug 'elzr/vim-json'
Plug 'solarnz/thrift.vim'
Plug 'vim-scripts/BufOnly.vim'
Plug 'terryma/vim-multiple-cursors'
"Plug 'PegasusWang/vim-ubuntu-pastebin'
Plug 'mileszs/ack.vim'
Plug 'rking/ag.vim'
Plug 'flazz/vim-colorschemes'
Plug 'vim-scripts/LargeFile'
Plug 'Yggdroot/indentLine'
Plug 'mhinz/vim-startify'
" let Vundle manage Vundle
Plug 'glench/vim-jinja2-syntax'

"my Plug here:
" http://vimawesome.com
" original repos on github
Plug 'rykka/riv.vim'    " rst
Plug 'Rykka/InstantRst'

Plug 'cakebaker/scss-syntax.vim'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'mxw/vim-jsx'
Plug 'othree/html5.vim'
" Plug 'kchmck/vim-coffee-script'
Plug 'mattn/emmet-vim'
Plug 'moll/vim-node'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'sukima/xmledit'
"Plug 'sjl/gundo.vim'
Plug 'jiangmiao/auto-pairs'
"Plug 'davidhalter/jedi-vim'
Plug 'python-mode/python-mode'
Plug 'tpope/vim-dispatch'
Plug 'fatih/vim-go'
"Plug 'jmcantrell/vim-virtualenv'
Plug 'heavenshell/vim-pydocstring'
Plug 'kien/rainbow_parentheses.vim'
"Plug 'Valloric/ListToggle'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'  " snippets collections
"Plug 'Valloric/YouCompleteMe'
" Plug 'scrooloose/syntastic'
"Plug 't9md/vim-quickhl'
"Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'    " 快速移动插件, ',,w'可以在单词上出现前缀，然后快速跳转
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'https://github.com/Shougo/unite.vim.git'
Plug 'https://github.com/Shougo/vimfiler.vim.git'
"Plug 'ryanoasis/vim-devicons'
"..................................
" plugin on GitHub repo
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'    " https://github.com/junegunn/gv.vim git commit browser
" plugin from http://vim-scripts.org/vim/scripts.html
" Plug 'L9'
Plug 'wincent/command-t'
" git repos on your local machine (i.e. when working on your own plugin)
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
Plug 'ascenator/L9', {'name': 'newL9'}
Plug 'farmergreg/vim-lastplace'
call plug#end()


" 模糊搜索，使用z/支持模糊搜索
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

" for python settings
" Override go-to.definition key shortcut to Ctrl-]
nmap <silent> <C-d> <Plug>(pydocstring)
nnoremap py :!python %<cr>
let g:pymode_python = 'python'  " Values are `python`, `python3`, `disable`.
"let g:pymode_path = ['/home/wnn/.pyenv/versions/pyenv_3.5.0/lib/python3.5/site-packages/']
let g:pymode_paths = reverse(split(globpath(getcwd().'/eggs', '*'), '\n'))    " support zc.buildout
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = 1
let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all
let g:pymode_syntax_highlight_self = g:pymode_syntax_all
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_trim_whitespaces = 1
let g:pymode_quickfix_maxheight = 2
let g:pymode_indent = 1
let g:pymode_folding = 1
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.set_trace()  # BREAKPOINT TODO REMOVE; from nose.tools import set_trace; set_trace()'
let g:pymode_breakpoint_bind = "<C-k>"


let g:pymode_run = 1
let g:pymode_run_bind = "<C-e>"
"let g:pymode_virtualenv = 1
"let g:pymode_virtualenv_path = $VIRTUAL_ENV

" Override view python doc key shortcut to Ctrl-Shift-d
set completeopt=menu    " Disable new window auto documentation, https://github.com/python-mode/python-mode/issues/384
let g:pymode_doc=1
let g:pymode_doc_bind = 'K'

autocmd CompleteDone * pclose
let g:pymode_rope = 1
let g:pymode_rope_completion = 1    " conflict with jedi
let g:pymode_rope_autoimport = 0
let g:pymode_rope_complete_on_dot = 1
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_goto_definition_bind = '<C-j>'
let g:pymode_rope_goto_definition_cmd = 'vnew'
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_regenerate_on_write = 0
command PR PymodeRopeRegenerate

let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_message = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe', 'pylint']
" http://stackoverflow.com/questions/16021297/how-to-map-alias-a-command-in-vim, PymodeLint映射成P
command PL PymodeLint
command F PymodeLintAuto    " auto pep8 fix
" let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }
"let g:syntastic_python_checkers = ['pep8']
let g:pymode_lint_cwindow = 0    " open quickfix window
let g:pymode_lint_ignore = "C0111, W0105, C0325"
let g:pymode_lint_signs = 1
let g:pymode_lint_todo_symbol = '⚠️'
" let g:pymode_lint_comment_symbol = '😢'
" let g:pymode_lint_error_symbol = '❌'
" let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = "\U2717"
let g:pymode_lint_comment_symbol = "\u2757"
let g:pymode_lint_visual_symbol = "\u0021"
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'PF'
" 修改默认的max-line红线为浅色，solorized黑色主题
"hi Search cterm=NONE ctermfg=black ctermbg=blue
highlight ColorColumn ctermbg=233
let g:pymode_options_max_line_length = 120
let g:pymode_options_colorcolumn = 1


" For emmemt only avilable for html,css,sass
let g:user_emmet_install_global = 0
autocmd FileType html,mako,css,sass,scss EmmetInstall
" emment key
let g:user_emmet_leader_key='<C-J>'

" for nerdtree
" autocmd vimenter * NERDTree
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\~$', '__pycache__'] "ignore files in NERDTree
nnoremap <F10> :exe 'NERDTreeToggle'<CR>
" nnoremap on :exe 'NERDTreeToggle' <CR>     " use on open nerdtree
nmap ,v :NERDTreeFind<cr>
nmap ,g :NERDTreeToggle<cr>

" for Tagbarbar, sudo apt-get install ctags
nnoremap <silent> <F8> :TagbarToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0    " sort by sourcefile
let g:tagbar_autopreview = 0
set updatetime=500   " milliseconds update


" for airline, http://vimawesome.com/plugin/vim-airline
let g:airline_powerline_fonts=1
let g:airline_theme = 'wombat'
let g:airline#extensions#tabline#enabled = 1
function! ArilineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%F'])
    "let g:airline_section_c = airline#section#create(['filetype'])
    let g:airline_section_x = airline#section#create(['%P'])
    let g:airline_section_y = airline#section#create(['%B'])
    let g:airline_section_z = airline#section#create_right(['%l', '%c'])
endfunction
autocmd VimEnter * call ArilineInit()


" 高亮当前选中单词
autocmd CursorMoved * exe exists("HlUnderCursor")?HlUnderCursor?printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\')):'match none':""
nnoremap <silent> <F3> :exe "let HlUnderCursor=exists(\"HlUnderCursor\")?HlUnderCursor*-1+1:1"<CR>


" when use diff from cmd line, change color theme

" 书写rst用到
let proj1 = { 'path': '~/Program/python-web-guide',}
let g:riv_projects = [proj1]


" Plug 'plasticboy/vim-markdown'
let g:vim_markdown_conceal = 0


" ctrlp, 在~/.agignore添加一行node_modules
" https://stackoverflow.com/questions/24479101/vim-ctrlp-not-parsing-ag-silver-search-ignore-option-correctly
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|swp|pyc|pyo)$',
  \ }
if executable('ag')
  " Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast, respects .gitignore
  " and .agignore. Ignores hidden files by default.
  let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g ""'
else
  "ctrl+p ignore files in .gitignore
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
endif


" 指定UltiSnips python的docstring风格, sphinx, google, numpy
let g:ultisnips_python_style = 'sphinx'

" 用ctrl+l可以在insert和command模式都可以保存
inoremap <c-l> <c-o>:w<cr>
nnoremap <c-l> :w<cr>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> [n :bnext<CR>
" https://stackoverflow.com/questions/15583346/how-can-i-temporarily-make-the-window-im-working-on-to-be-fullscreen-in-vim
nnoremap tt :tab split<CR>

" 评论配置
let g:NERDTrimTrailingWhitespace = 1
let g:javascript_plugin_jsdoc = 1

"http://vimawesome.com/plugin/rainbow-parentheses-vim   花里胡哨的彩虹括号^_^
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_max = 16

"http://vimawesome.com/plugin/scss-syntax-vim
au BufRead,BufNewFile *.scss set filetype=scss.css


let g:indentLine_enabled = 1
let g:indentLine_color_term = 239
let g:LargeFile=1

"http://sjl.bitbucket.org/gundo.vim/
"nnoremap <F4> :GundoToggle<CR>

" for html
autocmd BufNewFile,BufRead *.html setlocal expandtab tabstop=2 shiftwidth=2
let g:syntastic_html_tidy_ignore_errors = [ '<template> is not recognized!' ]


" for json
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
let g:vim_json_syntax_conceal = 0     " 显示json编辑时候的双引号
autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab


" https://github.com/wincent/wincent/blob/bff31c32e427c5913d1eed0b0c1b3da24e8ba8ba/roles/dotfiles/files/.vim/plugin/settings.vim#L38
if has('folding')
  if has('windows')
	set fillchars=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
  endif
  set foldmethod=indent               " not as cool as syntax, but faster
  set foldlevelstart=99               " start unfolded
endif

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j                " remove comment leader when joining comment lines
endif

set formatoptions+=n                  " smart auto-indenting inside numbered lists
set guioptions-=T                     " don't show toolbar
set hidden                            " allows you to hide buffers with unsaved changes without being prompted
set highlight+=c:LineNr               " blend vertical separators with line numbers
set laststatus=2                      " always show status line
set lazyredraw                        " don't bother updating screen during macro playback

" http://stackoverflow.com/questions/6488683/how-do-i-change-the-vim-cursor-in-insert-normal-mode
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

" 退出快捷键
inoremap jj <Esc>`^
inoremap hhh <Esc>`^
inoremap kkk <Esc>`^
inoremap lll <Esc>`^
inoremap ooo <Esc>`^o
inoremap <C-k> <Esc>`^
inoremap <leader>w <Esc>:w<cr>
noremap <leader>e :q<cr>
noremap <leader>E :qa!<cr>
noremap <leader>b :bd<cr>
noremap <leader>s :vs<cr>  " vertical split
noremap <leader>r :e!<cr>  " reload without save
noremap <leader>q :qa!<cr>  " quit all window without save
noremap <leader>w :w<cr>

" use ctrl+h/j/k/l switch window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l


" https://github.com/lfv89/vim-interestingwords 高亮感兴趣的 word
nnoremap <silent> <leader>f :call InterestingWords('n')<cr>
nnoremap <silent> <leader>F :call UncolorAllWords()<cr>

" https://github.com/jaxbot/semantic-highlight.vim
"nnoremap <Leader>s :SemanticHighlightToggle<cr>

" 禁止 startify 自动切换目录
let g:startify_change_to_dir = 0


" 用 ,a 搜索当前 cursor 下单词，-w 参数精确匹配单词
if executable('ag')
    noremap <leader>a :Ag! -w "<cword>"<cr>
else
    let g:ack_default_options = " -H --nopager --nocolor --nogroup --column"
    noremap <Leader>a :Ack <cword><cr>
endif


" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Plug 'fullybaked/toggle-numbers.vim'
nmap ,n :LineNumberToggle<cr>

" https://github.com/ianva/vim-youdao-translater settings
vnoremap <silent> <C-Y> :<C-u>Ydv<CR>
nnoremap <silent> <C-Y> :<C-u>Ydc<CR>
noremap <leader>yd :<C-u>Yde<CR>

" add :FormatJSON command, https://coderwall.com/p/faceag/format-json-in-vim
com! FormatJSON %!python3 -c "import json, sys, collections; print(json.dumps(json.load(sys.stdin, object_pairs_hook=collections.OrderedDict), ensure_ascii=False, indent=2))"
com! FormatJSONPy3 %!python3 -m json.tool
com! FormatJSONPy2 %!python -m json.tool
com! FormatJSONPy2Utf8 %!python -c "import json, sys, collections; print json.dumps(json.load(sys.stdin, object_pairs_hook=collections.OrderedDict), ensure_ascii=False, indent=2)"


" for golang https://github.com/fatih/vim-go
" https://github.com/fatih/vim-go-tutorial
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
set autowrite
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
let g:go_list_type = "quickfix"
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave_enabled = ['golint']
let g:go_metalinter_autosave = 1


autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Setting up how to display whitespace characters
set list
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,nbsp:~

" when use diff from cmd line, change color theme
if &diff
    colorscheme evening
else
    " solarized 主题
    let g:solarized_termtrans = 1
    "let g:solarized_termcolors=256
    set background=dark
    colorscheme solarized
    let g:solarized_visibility = "high"
    let g:solarized_contrast = "high"
endif
